// <auto-generated />
using System;
using DoorDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DoorWebDB.Migrations
{
    [DbContext(typeof(DoorDbContext))]
    [Migration("20240709191822_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DoorDB.TblAuditLog", b =>
                {
                    b.Property<int>("Serial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ActType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Serial");

                    b.ToTable("tblAuditLog");
                });

            modelBuilder.Entity("DoorDB.TblPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("權限項目Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("權限項目名稱");

                    b.Property<string>("NameI18n")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("權限項目名稱(i18n)");

                    b.Property<int>("PermissionGroupId")
                        .HasColumnType("int")
                        .HasComment("權限項目所屬群組([tblPermissionGroup].[Id])");

                    b.Property<int>("PermissionLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tblPermission");

                    b.HasData(
                        new
                        {
                            Id = 110,
                            Name = "查詢",
                            NameI18n = "a",
                            PermissionGroupId = 1,
                            PermissionLevel = 0
                        },
                        new
                        {
                            Id = 120,
                            Name = "修改",
                            NameI18n = "a",
                            PermissionGroupId = 1,
                            PermissionLevel = 0
                        },
                        new
                        {
                            Id = 210,
                            Name = "查詢",
                            NameI18n = "a",
                            PermissionGroupId = 2,
                            PermissionLevel = 0
                        },
                        new
                        {
                            Id = 220,
                            Name = "修改",
                            NameI18n = "a",
                            PermissionGroupId = 2,
                            PermissionLevel = 0
                        },
                        new
                        {
                            Id = 310,
                            Name = "查詢",
                            NameI18n = "a",
                            PermissionGroupId = 3,
                            PermissionLevel = 0
                        },
                        new
                        {
                            Id = 320,
                            Name = "修改",
                            NameI18n = "a",
                            PermissionGroupId = 3,
                            PermissionLevel = 0
                        },
                        new
                        {
                            Id = 410,
                            Name = "查詢",
                            NameI18n = "a",
                            PermissionGroupId = 4,
                            PermissionLevel = 0
                        },
                        new
                        {
                            Id = 420,
                            Name = "修改",
                            NameI18n = "a",
                            PermissionGroupId = 4,
                            PermissionLevel = 0
                        });
                });

            modelBuilder.Entity("DoorDB.TblPermissionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameI18n")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("tblPermissionGroup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "大門",
                            NameI18n = ""
                        },
                        new
                        {
                            Id = 2,
                            Name = "儲藏室",
                            NameI18n = ""
                        },
                        new
                        {
                            Id = 3,
                            Name = "門3",
                            NameI18n = ""
                        },
                        new
                        {
                            Id = 4,
                            Name = "門4",
                            NameI18n = ""
                        });
                });

            modelBuilder.Entity("DoorDB.TblQRCodeStorage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DoorTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("QRCodeData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("QRcodeType")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("tblQRCodeStorage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2024, 7, 10, 3, 18, 21, 981, DateTimeKind.Local).AddTicks(4737),
                            DoorTime = new DateTime(2024, 7, 10, 3, 18, 21, 981, DateTimeKind.Local).AddTicks(4725),
                            IsDelete = false,
                            IsEnable = true,
                            ModifiedTime = new DateTime(2024, 7, 10, 3, 18, 21, 981, DateTimeKind.Local).AddTicks(4736),
                            QRCodeData = "iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAA",
                            QRcodeType = "Common"
                        },
                        new
                        {
                            Id = 2,
                            CreateTime = new DateTime(2024, 7, 10, 3, 18, 21, 981, DateTimeKind.Local).AddTicks(4741),
                            DoorTime = new DateTime(2024, 7, 10, 3, 18, 21, 981, DateTimeKind.Local).AddTicks(4739),
                            IsDelete = false,
                            IsEnable = true,
                            ModifiedTime = new DateTime(2024, 7, 10, 3, 18, 21, 981, DateTimeKind.Local).AddTicks(4740),
                            QRCodeData = "Ars4c6QAADEpJREFUeF7tneF287gKRSfv/9C9K+1Mb",
                            QRcodeType = "Temporary"
                        });
                });

            modelBuilder.Entity("DoorDB.TblRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("tblRole");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CanDelete = false,
                            CreatedTime = new DateTime(2024, 7, 10, 3, 18, 21, 981, DateTimeKind.Local).AddTicks(4753),
                            CreatorUserId = 1,
                            Description = "Administrators",
                            IsDelete = false,
                            IsEnable = true,
                            ModifiedTime = new DateTime(2024, 7, 10, 3, 18, 21, 981, DateTimeKind.Local).AddTicks(4755),
                            Name = "System Admin"
                        },
                        new
                        {
                            Id = 2,
                            CanDelete = false,
                            CreatedTime = new DateTime(2024, 7, 10, 3, 18, 21, 981, DateTimeKind.Local).AddTicks(4758),
                            CreatorUserId = 1,
                            Description = "Users",
                            IsDelete = false,
                            IsEnable = true,
                            ModifiedTime = new DateTime(2024, 7, 10, 3, 18, 21, 981, DateTimeKind.Local).AddTicks(4759),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("DoorDB.TblUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastLoginIP")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("locale")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tblUser");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountType = "LOCAL",
                            CreateTime = new DateTime(2024, 7, 10, 3, 18, 21, 981, DateTimeKind.Local).AddTicks(4746),
                            DisplayName = "Administrator",
                            Email = "",
                            IsDelete = false,
                            IsEnable = true,
                            LastLoginIP = "",
                            ModifiedTime = new DateTime(2024, 7, 10, 3, 18, 21, 981, DateTimeKind.Local).AddTicks(4747),
                            Secret = "1qaz2wsx",
                            Username = "admin",
                            locale = 1
                        });
                });

            modelBuilder.Entity("TblPermissionTblRole", b =>
                {
                    b.Property<int>("PermissionsId")
                        .HasColumnType("int");

                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.HasKey("PermissionsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("TblPermissionTblRole");

                    b.HasData(
                        new
                        {
                            PermissionsId = 110,
                            RolesId = 2
                        },
                        new
                        {
                            PermissionsId = 210,
                            RolesId = 2
                        },
                        new
                        {
                            PermissionsId = 310,
                            RolesId = 2
                        },
                        new
                        {
                            PermissionsId = 410,
                            RolesId = 2
                        },
                        new
                        {
                            PermissionsId = 110,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 120,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 210,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 220,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 310,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 320,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 410,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 420,
                            RolesId = 1
                        });
                });

            modelBuilder.Entity("TblQRCodeStorageTblUser", b =>
                {
                    b.Property<int>("QRCodesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("QRCodesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("TblQRCodeStorageTblUser");

                    b.HasData(
                        new
                        {
                            QRCodesId = 1,
                            UsersId = 1
                        },
                        new
                        {
                            QRCodesId = 2,
                            UsersId = 1
                        });
                });

            modelBuilder.Entity("TblRoleTblUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("TblRoleTblUser");

                    b.HasData(
                        new
                        {
                            RolesId = 1,
                            UsersId = 1
                        });
                });

            modelBuilder.Entity("TblPermissionTblRole", b =>
                {
                    b.HasOne("DoorDB.TblPermission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoorDB.TblRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblQRCodeStorageTblUser", b =>
                {
                    b.HasOne("DoorDB.TblQRCodeStorage", null)
                        .WithMany()
                        .HasForeignKey("QRCodesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoorDB.TblUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblRoleTblUser", b =>
                {
                    b.HasOne("DoorDB.TblRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoorDB.TblUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
